{"version":3,"sources":["utils/streamServices.js","Player.jsx","utils/urlParams.js","App.jsx","index.jsx"],"names":["STREAM_SERVICES","TWITCH","NONOLIVE","GOODGAME","getChatUrl","_ref","service","payload","concat","getPlayerUrl","_ref2","Player","className","src","playerRef","useRef","useLayoutEffect","current","setAttribute","react_default","a","createElement","ref","DEFAULT_PLAYER","DEFAULT_CHATS","id","isValidStreamService","streamService","Object","values","includes","getStreamService","urlParam","split","length","slicedToArray","_streamService2","document","title","GlobalStyle","createGlobalStyle","_templateObject","Container","styled","div","_templateObject2","p","css","_templateObject3","StyledPlayer","_templateObject4","_templateObject5","ChatTabs","_templateObject6","ChatTab","_templateObject7","active","Chat","iframe","_templateObject8","App","urlParams","URLSearchParams","window","location","search","player","getPlayerFromUrl","get","chats","map","chat","filter","getChatsFromUrl","_useState","useState","_useState2","activeChatId","setActiveChatId","renderedChats","Fragment","key","onClick","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.a73e1293.chunk.js","sourcesContent":["export const STREAM_SERVICES = {\n  TWITCH: 'twitch',\n  NONOLIVE: 'nonolive',\n  GOODGAME: 'goodgame',\n};\n\nexport const getChatUrl = ({ service, payload }) => {\n  switch (service) {\n    case 'twitch':\n    default:\n      return `//www.twitch.tv/embed/${payload}/chat?darkpopout`;\n\n    case 'nonolive':\n      return `//www.nonolive.com/popout/chat/${payload}`;\n  }\n};\n\nexport const getPlayerUrl = ({ service, payload }) => {\n  switch (service) {\n    case 'twitch':\n    default:\n      return `//player.twitch.tv/?channel=${payload}`;\n\n    case 'nonolive':\n      return `//www.nonolive.com/room/${payload}`;\n  }\n};\n","import React, { useLayoutEffect, useRef } from 'react';\nimport pt from 'prop-types';\n\nimport { STREAM_SERVICES } from './utils/streamServices';\n\nconst Player = ({ className, src, service }) => {\n  const playerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    if (playerRef.current && service === STREAM_SERVICES.TWITCH) {\n      playerRef.current.setAttribute('allowfullscreen', 'true');\n    }\n  }, [service]);\n\n  // eslint-disable-next-line jsx-a11y/iframe-has-title\n  return <iframe className={className} src={src} service={service} ref={playerRef} />;\n};\n\nPlayer.propTypes = {\n  className: pt.string,\n  src: pt.string.isRequired,\n  service: pt.string.isRequired,\n};\n\nexport default Player;\n","import { STREAM_SERVICES } from './streamServices';\n\nconst CHANNEL_SEPARATOR = '@';\nconst CHATS_SEPARATOR = ',';\n\nconst DEFAULT_PLAYER = { service: 'twitch', payload: 'honeymad' };\n\nconst DEFAULT_CHATS = [\n  { id: 1, service: 'twitch', payload: 'honeymad' },\n  { id: 2, service: 'twitch', payload: 'nytick' },\n];\n\nconst isValidStreamService = streamService => streamService && Object.values(STREAM_SERVICES).includes(streamService.service);\n\nconst getStreamService = (urlParam) => {\n  if (!urlParam) return null;\n\n  const streamService = urlParam.split(CHANNEL_SEPARATOR);\n\n  if (streamService.length === 1) {\n    const [payload] = streamService;\n    return { id: urlParam, service: STREAM_SERVICES.TWITCH, payload };\n  }\n\n  if (streamService.length === 2) {\n    const [service, payload] = streamService;\n    return { id: urlParam, service, payload };\n  }\n\n  return null;\n};\n\nexport const getPlayerFromUrl = (urlParam) => {\n  const player = getStreamService(urlParam);\n\n  return isValidStreamService(player) ? player : DEFAULT_PLAYER;\n};\n\nexport const getChatsFromUrl = (urlParam) => {\n  if (!urlParam) return DEFAULT_CHATS;\n\n  const chats = urlParam\n    .split(CHATS_SEPARATOR)\n    .map(chat => getStreamService(chat))\n    .filter(chat => chat && isValidStreamService(chat));\n\n  return chats.length > 0 ? chats : DEFAULT_CHATS;\n};\n","import React, { useState } from 'react';\nimport styled, { createGlobalStyle, css } from 'styled-components';\n\nimport Player from './Player';\nimport { STREAM_SERVICES, getChatUrl, getPlayerUrl } from './utils/streamServices';\nimport { getPlayerFromUrl, getChatsFromUrl } from './utils/urlParams';\n\ndocument.title = 'HoneyMad';\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --color-black: #0e0c13;\n    --color-violet: #2c2541;\n    --color-violet-dark: #1f1925;\n    --chat-tabs-height: 26px;\n    --chat-witdh: 340px;\n  }\n  body {\n    margin: 0;\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n\n  ${p => p.service === STREAM_SERVICES.NONOLIVE\n    && css`\n      &:after {\n        content: '';\n        position: absolute;\n        left: 0;\n        right: var(--chat-witdh);\n        bottom: 0;\n        height: 60px;\n        background-color: #313131;\n      }\n    `};\n`;\nconst StyledPlayer = styled(Player)`\n  position: relative;\n  border: none;\n  width: 100%;\n  margin-right: var(--chat-witdh);\n\n  ${p => p.service === STREAM_SERVICES.NONOLIVE\n    && css`\n      margin-right: 0;\n    `};\n`;\nconst ChatTabs = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: flex;\n  height: var(--chat-tabs-height);\n  width: var(--chat-witdh);\n  border-bottom: 1px solid var(--color-violet);\n`;\nconst ChatTab = styled.div`\n  flex-grow: 1;\n  flex-basis: 0;\n  color: ${p => (p.active ? '#d3d3d3' : '#898395')};\n  background-color: var(${p => (p.active ? '--color-violet-dark' : '--color-black')});\n  font-family: sans-serif;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: var(--chat-tabs-height);\n  text-align: center;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--color-violet-dark);\n  }\n  &:not(:last-child) {\n    border-right: 1px solid var(--color-violet);\n  }\n`;\nconst Chat = styled.iframe`\n  position: absolute;\n  top: var(--chat-tabs-height);\n  right: 0;\n  display: ${p => (p.active ? 'block' : 'none')};\n  width: var(--chat-witdh);\n  height: calc(100% - var(--chat-tabs-height));\n  border: none;\n  background-color: #fff;\n`;\n\nconst App = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const player = getPlayerFromUrl(urlParams.get('player'));\n  const chats = getChatsFromUrl(urlParams.get('chats'));\n\n  const [activeChatId, setActiveChatId] = useState(chats[0].id);\n\n  // Убираем чат nonolive если он совпадает с каналом плеера\n  const renderedChats = chats.filter(\n    chat => !(chat.service === STREAM_SERVICES.NONOLIVE && chat.payload === player.payload),\n  );\n\n  return (\n    <>\n      <Container service={player.service}>\n        <StyledPlayer src={getPlayerUrl(player)} service={player.service} />\n        <ChatTabs>\n          {chats.map(chat => (\n            <ChatTab\n              key={chat.id}\n              active={chat.id === activeChatId}\n              onClick={() => setActiveChatId(chat.id)}\n            >\n              {chat.payload}\n            </ChatTab>\n          ))}\n        </ChatTabs>\n        {renderedChats.map(chat => (\n          <Chat key={chat.id} active={chat.id === activeChatId} src={getChatUrl(chat)} />\n        ))}\n      </Container>\n      <GlobalStyle />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}